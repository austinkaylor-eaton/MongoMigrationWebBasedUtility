@page "/"
@inject Service.JobManager JobManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject Service.FileService FileService
@inject HttpClient HttpClient

@using MongoMigrationWebApp.Components
@using OnlineMongoMigrationProcessor
@using MigrationSettings = MongoMigrationWebApp.Components.MigrationSettings

@using OnlineMongoMigrationProcessor.Models


<div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="mb-0">
        <button class="btn btn-light" title="Download Jobs JSON" @onclick="DownloadFile" style="border: none; background: transparent;">
            <i class="bi bi-download"></i>
        </button>
        Migration Jobs
    </h3>
    <div class="d-flex align-items-center mb-3">
        <button class="btn btn-primary" title="New Job" @onclick="StartMigrationAsync">New Job</button>
        <button class="btn btn-light" title="Edit Migration Settings" @onclick="OpenConfig" style="border: none; background: transparent;">
            <i class="bi bi-gear"></i>
        </button>
    </div>
</div>

@if (_loadingComplete)
{
    @if (migrationJobs?.Count == 0)
    {
        <div>No migrations could be found</div>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th> &nbsp;&nbsp;&nbsp;&nbsp;</th>
                    <th>Name</th>
                    <th>Migration Tool</th>
                    <th>Started On (UTC)</th>
                    <th>Endpoints</th>
                    <th>Is Online</th>
                    <th>Is Completed</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var migration in JobManager.GetMigrations())
                {
                    <tr>
                        <td>
                            @if (migration.CurrentlyActive && JobManager.MigrationWorker != null && JobManager.MigrationWorker.IsProcessRunning())
                            {
                                <i class="bi bi-star-fill text-warning"></i>
                            }
                        </td>
                        <td>@migration.Name</td>
                        <td>@GetToolName(migration.UseMongoDump)</td>
                        <td>@migration.StartedOn</td>
                        <td class="tooltip-text" title="@migration.NameSpaces">@migration.SourceEndpoint<br /> to <br /> @migration.TargetEndpoint</td>
                        <td>@migration.IsOnline</td>
                        <td>@migration.IsCompleted</td>
                        <td>
                            <button class="btn btn-primary" title="View Job" @onclick="() => ViewMigration(migration.Id)">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn btn-secondary" title="Delete Job" @onclick="() => RemoveMigration(migration.Id)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (_migrationDetailsPopUpOpen)
{
    <MigrationDetails NewMode=true OnSubmit="@OnMigrationDetailsPopUpSubmit" CheckNameExists="CheckIfNameExistsAsync" />
}

@if (_yesNoDialogOpen)
{
    <YesNoDialog Type="YesNoDialog.Category.DeleteNot" Caption="Confirm Delete" Message="@_message" OnClose="@YesNoDialogSubmit" />
}

@if (_messageDialogOpen)
{
    <YesNoDialog Type="YesNoDialog.Category.Okay" Caption="Message" Message="@_message" OnClose="@YesNoDialogSubmit" />
}

@if (_editSettingsOpen)
{
    <MigrationSettings Configuration="@GetConfig()" OnConfigurationSaved="HandleConfigurationSaved" />
}

@code {
#pragma warning disable CS8603
#pragma warning disable CS8604
#pragma warning disable CS8600

    private bool _migrationDetailsPopUpOpen;
    private bool _yesNoDialogOpen;
    private bool _messageDialogOpen;
    private bool _editSettingsOpen;

    private string _message = string.Empty;
    private MigrationJob? _selectedMigrationJob;
    private List<MigrationJob>? migrationJobs;
    private bool _loadingComplete;

    private string GetToolName(bool useMongoDump)
    {
        return useMongoDump ? "MongoDump and MongoRestore" : "Mongo Driver";
    }

#pragma warning disable CS1998
    protected override async Task OnParametersSetAsync()
    {
        if (_loadingComplete)
            return;

        _loadingComplete = false;
        migrationJobs = JobManager.GetMigrations();
        _loadingComplete = true;
    }
#pragma warning restore CS1998
#pragma warning disable CS8602

    private async Task DownloadFile()
    {
        var url = $"/api/File/download/Jobs";
        var response = await HttpClient.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var contentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";

            // Use JavaScript to trigger the file download
            await JS.InvokeVoidAsync("downloadFile", fileBytes, "MigrationJobs.json", contentType);
        }
        else
        {
            Console.Error.WriteLine($"Failed to download log file: Jobs.json");
        }
    }

    private void RemoveMigration(string? id)
    {
        var migrationJob = JobManager.GetMigrations().Find(m => m.Id == id);
        _selectedMigrationJob = migrationJob;
        if (!_selectedMigrationJob.CurrentlyActive || !JobManager.MigrationWorker.IsProcessRunning())
        {
            _message = "Are you sure you want to delete " + _selectedMigrationJob.Name + " ?";
            _yesNoDialogOpen = true;
        }
        else
        {
            _message = "Can't delete active job " + _selectedMigrationJob.Name + ". Please stop the job and try again.";
            _messageDialogOpen = true;
        }
    }

    private void YesNoDialogSubmit(bool approved)
    {
        if (_messageDialogOpen)
        {
            _messageDialogOpen = false;
            return;
        }
        else
        {
            _yesNoDialogOpen = false;

            if (approved && (!_selectedMigrationJob.CurrentlyActive || !JobManager.MigrationWorker.IsProcessRunning()))
            {

                if (_selectedMigrationJob != null)
                {
                    string jobId = _selectedMigrationJob.Id;
                    JobManager.GetMigrations().Remove(_selectedMigrationJob);

                    try
                    {
                        Task.Run(() =>
                           {
                               JobManager.ClearJobFiles(jobId);
                           });
                    }
                    catch { }
                }

            }

            _selectedMigrationJob = null;
        }
    }

    private OnlineMongoMigrationProcessor.Models.MigrationSettings GetConfig()
    {
        if (JobManager.MigrationWorker.Config == null)
        {
            JobManager.MigrationWorker.Config = new OnlineMongoMigrationProcessor.Models.MigrationSettings();
            JobManager.MigrationWorker.Config.Load();
        }

        return JobManager.MigrationWorker.Config;
    }

    private void OpenConfig()
    {
        _editSettingsOpen = true;
    }

    private void HandleConfigurationSaved(OnlineMongoMigrationProcessor.Models.MigrationSettings updatedConfig)
    {
        _editSettingsOpen = false;

        if (updatedConfig != null)
        {
            JobManager.MigrationWorker.Config = updatedConfig;
            JobManager.MigrationWorker.Config.Save();
            Console.WriteLine($"Configuration updated: {updatedConfig.MongoToolsDownloadUrl}");
        }
    }

    private void ViewMigration(string? id)
    {
        NavigationManager.NavigateTo($"/migrationjobviewer/{id}");
    }

    private void StartMigrationAsync()
    {
        

        _selectedMigrationJob = null;
        _migrationDetailsPopUpOpen = true;
    }

    private Task<bool> CheckIfNameExistsAsync(string name)
    {
        var migrationJob = JobManager.GetMigrations().Find(m => m.Name == name);
        return Task.FromResult(migrationJob != null);
    }

    private void OnMigrationDetailsPopUpSubmit(MigrationJob job)
    {
        _migrationDetailsPopUpOpen = false;
        if (job != null)
        {
            if (_selectedMigrationJob == null)
            {
                JobManager.GetMigrations().Add(job);
                JobManager.Save();
                ViewMigration(job.Id);
            }
        }
    }
}
