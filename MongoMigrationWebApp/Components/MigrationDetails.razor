@inject Service.JobManager JobManager
@inject IConfiguration Configuration

@using OnlineMongoMigrationProcessor
@using OnlineMongoMigrationProcessor.Models

<div class="modal fade show d-block bg-dark bg-opacity-75" id="myModal" aria-modal="true" role="dialog">
    <div class="modal-dialog bg-dark">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@(newMode ? "New Job Details" : "Update Connections Strings")</h4>
                <button type="button" class="btn-close" aria-label="Close" @onclick="@Cancel"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" id="name" class="form-control" disabled="@(!newMode)" @bind="name" />
                </div>
                @if (newMode)
                {
                    <div class="mb-3">
                        <label for="mongo-options">Data Migration Tool:</label>
                        <select id="mongo-options" @onchange="OnSelectionChanged" >
                            @if (AllowMongoDump)
                            {
                                <option value="Use MongoDump and MongoRestore">Use MongoDump and MongoRestore</option>
                            }
                            <option value="Use Mongo Driver">Use Mongo Driver</option>
                        </select>
                    </div>
                }
                <div class="mb-3">
                    <div style="display: flex; gap: 1rem; align-items: center;">  
                        <label class="form-label">
                            <input type="checkbox" id="isOnline" disabled="@(!newMode)" @bind="isOnline" />
                            Online
                        </label>
                        <label class="form-label">                            
                            <input type="checkbox" id="copyIndex" disabled="@(!newMode)" @bind="appendMode" />
                            Append Mode
                        </label>
                        <label class="form-label">                            
                            <input type="checkbox" id="copyIndex" disabled="@(!newMode || appendMode)" @bind="skipIndexes" />
                            Skip Indexes
                        </label>
                       
                    </div>
                </div>

                <div class="mb-3">
                    <label for="sourceConnectionString" class="form-label">Source Connection String</label>
                    <input type="password" id="sourceConnectionString" placeholder="@(newMode ? "" : "For " + sourceEndpoint)" class="form-control" @bind="sourceConnectionString" />
                </div>

                <div class="mb-3">
                    <label for="targetConnectionString" class="form-label">Target Connection String</label>
                    <input type="password" id="targetConnectionString" placeholder="@(newMode ? "For [account name].mongocluster.cosmos.azure.com" : "For " + targetEndpoint)" class="form-control" @bind="targetConnectionString" />
                </div>

                <div class="mb-3">
                    <label for="nameSpaces" class="form-label">Collections To Migrate</label>
                    <textarea id="nameSpaces" disabled="@(!newMode)" rows="4" placeholder="e.g. db1.col1,db1.col2,db2.col1,db2.col5" class="form-control" @bind="namespaces"></textarea>
                </div>

                <div class="mb-3">
                    <label for="isSimulatedRun" class="form-label">
                        <input type="checkbox" id="isSimulatedRun" disabled="@(!newMode)" @bind="isSimulatedRun" />
                        Simulation Mode (No Writes to Target)
                    </label>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-2">@errorMessage</div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@HandleSubmit>Ok</button>
                <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
#pragma warning disable CS8601
#pragma warning disable CS8602

    [Parameter]
    public bool newMode { get; set; }

    [Parameter]
    public string name { get; set; } = string.Empty;

    [Parameter]
    public bool isOnline { get; set; }

    [Parameter]
    public string sourceEndpoint { get; set; } = string.Empty;

    [Parameter]
    public string targetEndpoint { get; set; } = string.Empty;

    [Parameter]
    public string namespaces { get; set; } = string.Empty;

    public string sourceConnectionString { get; set; } = string.Empty;

    public string targetConnectionString { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<MigrationJob> OnSubmit { get; set; }

    [Parameter]
    public Func<string, Task<bool>> CheckNameExists { get; set; }

    private bool skipIndexes = false;// create indexes on Target
    private bool appendMode = false;// if the target collection exists, it will be deleted
    private string errorMessage = string.Empty;
    private bool useMongoDump = true; // Variable to track the selected value
    private string selectedOption = "Use MongoDump and MongoRestore"; // Default dropdown value
    private bool isSimulatedRun = false; // Variable to track the dummy run option
    private bool AllowMongoDump => Configuration.GetValue<bool>("AllowMongoDump");
    
    private void OnSelectionChanged(ChangeEventArgs e)
    {
        selectedOption = e.Value.ToString();
        useMongoDump = selectedOption == "Use MongoDump and MongoRestore"; // Set useMongoDump based on selection
    }

    private async void HandleSubmit()
    {
       
        if (string.IsNullOrEmpty(name))
        {
            errorMessage = "Name can't be empty.";
            return;
        }
        if (newMode && CheckNameExists != null) // Ensure callback is provided
        {
            var nameExists = await CheckNameExists(name);
            if (nameExists)
            {
                errorMessage = "Name already exists.";
                return;
            }
        }

        if (string.IsNullOrEmpty(sourceConnectionString) || string.IsNullOrEmpty(targetConnectionString))
        {
            errorMessage = "Source and Target Connection Strings can't be empty.";
            return;
        }

        var tmpSrcEndpoint = Helper.ExtractHost(sourceConnectionString);
        if (tmpSrcEndpoint != sourceEndpoint && !newMode)
        {
            errorMessage = "Source endpoint doesn't match provided Source Connection String.";
            return;
        }

        var tmpTgtEndpoint = Helper.ExtractHost(targetConnectionString);
        if (tmpTgtEndpoint != targetEndpoint && !newMode)
        {
            errorMessage = "Target endpoint doesn't match provided Target Connection String.";
            return;
        }

        if (tmpTgtEndpoint == tmpSrcEndpoint)
        {
            errorMessage = "Target and Source endpoints can't be the same.";
            return;
        }

        if (newMode)
        {
            var retValue = Helper.ValidateNamespaceFormat(namespaces);
            if (!retValue.Item1)
            {
                errorMessage = "Namespaces Format is invalid.";
                return;
            }
            else
            {
                namespaces = retValue.Item2;
            }
        }

        var job = new MigrationJob
            {
                Name = name,
                Id = Guid.NewGuid().ToString(),
                IsOnline = isOnline,
                SourceConnectionString = sourceConnectionString,
                TargetConnectionString = targetConnectionString,
                SourceEndpoint = tmpSrcEndpoint,
                TargetEndpoint = tmpTgtEndpoint,
                NameSpaces = namespaces,
                UseMongoDump = useMongoDump,
                IsSimulatedRun = isSimulatedRun,
                SkipIndexes=skipIndexes,
                AppendMode=appendMode
            };
        await OnSubmit.InvokeAsync(job);
    }

    private Task Cancel()
    {
        return OnSubmit.InvokeAsync(null);
    }
}

